{"version":3,"sources":["routes/index.js"],"names":[],"mappings":"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","file":"routes/index.js","sourcesContent":["\nvar OpError = require(\"../errors/index\");\nvar controller = require('../controllers/index');\nvar express = require('express');\nvar router = express.Router();\nvar logger = require('verbose-console-log');\n\n// Do your next() stuff in controller's actions when you done\n\nrouter.get('/', function(req, res, next) {\n    controller.doAction(\"index\", arguments);\n});\n\n// test, how works error handling\nrouter.get('/nodes/500', function(req, res, next) {\n    controller.doAction(\"error500\", arguments);\n});\n\n// get list of nodes\nrouter.get('/nodes', function(req, res, next) {\n\n    throw new OpError(\"lol2\");\n    //next(new Error(\"asdf\"));\n\n    //var promise = controller.doAction(\"getNodes\", arguments);\n\n    //controller.doAction(\"getNodes\", arguments).then(function(result) {\n    //    logger.log(result);\n    //}).catch(function(err) {\n    //    logger.error(err);\n    //});\n\n    //var controllerPromise = controller.doAction(\"getNodes\", arguments);\n    //controllerPromise.then(function(result) {\n    //    res.json(res.jsonToRender);\n    //    next();\n    //}).catch(function(err) {\n    //    logger.err(err);\n    //    next(err);\n    //});\n});\n\n// get one node by id\n// @todo 400 if incorrect id, 404 if can't find resource\nrouter.get('/nodes/:id', function(req, res, next) {\n    var controllerPromise = controller.doAction(\"getOneNode\", arguments);\n    controllerPromise.then(function(result) {\n        res.json(res.jsonToRender);\n        //next();\n    }).catch(function(err) {\n        logger.err(err);\n    });\n});\n\n// add new node\nrouter.post('/nodes/add', function(req, res, next) {\n    var controllerPromise = controller.doAction(\"addNode\", arguments);\n    controllerPromise.then(function(result) {\n        res.json(res.jsonToRender);\n        //next();\n    }).catch(function(err) {\n        logger.err(err);\n    });\n});\n\n// update one node by id\nrouter.put('/nodes/:id', function(req, res, next) {\n    var controllerPromise = controller.doAction(\"updateNode\", arguments);\n    controllerPromise.then(function(result) {\n        res.json(res.jsonToRender);\n        //next();\n    }).catch(function(err) {\n        logger.err(err);\n    });\n});\n\n// delete one node by id\nrouter.delete('/nodes/:id', function(req, res, next) {\n    var controllerPromise = controller.doAction(\"deleteNode\", arguments);\n    controllerPromise.then(function(result) {\n        res.json(res.jsonToRender);\n        //next();\n    }).catch(function(err) {\n        logger.err(err);\n    });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}