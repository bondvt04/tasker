{"version":3,"sources":["errors/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;IAOM,OAAO;cAAP,OAAO;;AACE,aADT,OAAO,CACG,OAAO,EAAE;8BADnB,OAAO;;AAEL,mCAFF,OAAO,6CAEC,OAAO,EAAE;;AAEf,YAAI,CAAC,IAAI,GAAG,SAAS,CAAC;AACtB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,IAAI,GAAG,aAAa,CAAC;AAC1B,aAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACxD;;;;;WARC,OAAO;GAAS,KAAK;;IAcrB,aAAa;cAAb,aAAa;;AACJ,aADT,aAAa,CACH,OAAO,EAAE;8BADnB,aAAa;;AAEX,mCAFF,aAAa,6CAEL,OAAO,EAAE;;AAEf,YAAI,CAAC,IAAI,GAAG,eAAe,CAAC;AAC5B,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,YAAI,CAAC,IAAI,GAAG,UAAU,CAAC;AACvB,aAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACxD;;;;;WARC,aAAa;GAAS,OAAO;;AAcnC,SAAS,gBAAgB,CAAC,GAAG,EAAE;;AAE3B,UAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;;AAE9B,QAAG,aAAa,KAAK,GAAG,CAAC,IAAI,EAAE;;;AAG3B,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACnB;CACJ;;;;;AAKD,SAAS,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC9C,QAAG,CAAC,GAAG,CAAC,OAAO,EAAE;;AAEb,YAAI,OAAO,GAAG,wCAAwC,CAAC,SAAS,CAAC,GAAG,CAAC;AACrE,wBAAgB,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;;AAED,UAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AACvF,OAAG,CAAC,WAAW,CAAC,GAAG,EAAE,EAAC,cAAc,EAAG,WAAW,EAAC,CAAC,CAAC;AACrD,OAAG,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;AACnD,OAAG,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;;AAEtC,oBAAgB,CAAC,GAAG,CAAC,CAAC;CACzB;;AAID,MAAM,CAAC,OAAO,GAAG;AACb,WAAO,EAAE;AACL,eAAO,EAAE,OAAO;AAChB,qBAAa,EAAE,aAAa;KAC/B;AACD,YAAQ,EAAE;AACN,wBAAgB,EAAE,gBAAgB;AAClC,2BAAmB,EAAE,mBAAmB;KAC3C;CACJ,CAAA","file":"errors/index.js","sourcesContent":["/**\n * Created by anatoliybondar on 9/29/15.\n */\n\n/**\n * Operational error - predicted and caught error\n */\nclass OpError extends Error {\n    constructor(message) {\n        super(message);\n\n        this.name = \"OpError\";\n        this.message = message;\n        this.type = \"operational\";\n        Error.captureStackTrace(this, this.constructor.name);\n    }\n}\n\n/**\n * Error, after which we must kill process\n */\nclass CriticalError extends OpError {\n    constructor(message) {\n        super(message);\n\n        this.name = \"CriticalError\";\n        this.message = message;\n        this.type = \"critical\";\n        Error.captureStackTrace(this, this.constructor.name);\n    }\n}\n\n/**\n * Launch this AFTER all handlers, because this handler can kill process\n */\nfunction lastErrorHandler(err) {\n    // @todo log to db and files\n    logger.error(err.message.red);\n\n    if(\"operational\" !== err.type) {\n        // This is UNCAUGHT error! So we must crash application in order to not continue app running in unknown state\n        // So log, send response to user and then crash\n        process.exit(1);\n    }\n}\n\n/**\n * This handler returns\n */\nfunction expressErrorHandler(err, req, res, next) {\n    if(!err.message) {\n        // @todo test this\n        var message = 'You did next(NOT_ERROR_VAR); stuff!!!!'.underline.red;\n        lastErrorHandler(new Error(message));\n    }\n\n    logger.error('ERROR MIDDLEWARE'.red, err.message.red, 'Stack:'.yellow, err, err.stack);\n    res.writeHeader(500, {'Content-Type' : \"text/html\"});\n    res.write(\"<h1>\" + err.name + err.stack + \"</h1>\");\n    res.end(\"<p>\" + err.message + \"</p>\");\n\n    lastErrorHandler(err);\n}\n\n\n\nmodule.exports = {\n    classes: {\n        OpError: OpError,\n        CriticalError: CriticalError\n    },\n    handlers: {\n        lastErrorHandler: lastErrorHandler,\n        expressErrorHandler: expressErrorHandler\n    }\n}"],"sourceRoot":"/source/"}