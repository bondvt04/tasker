{"version":3,"sources":["bin/www.js"],"names":[],"mappings":"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","file":"bin/www.js","sourcesContent":["/**\n * Created by anatoliybondar on 8/31/15.\n */\n\n/**\n * @todo use this error handling:\n *\n * requestDomain.on('error', next);\n *\n * We can then use the default error handler to get a much nicer looking error page & stack trace:\n *\n * app.use(express.errorHandler({dumpExceptions: true, showStack: true}));\n *\n * http://www.asyncdev.net/2013/07/promises-errors-and-express-js/\n */\n\n/**\n * Открываем столько дебаггеров, сколько ядер, с соответствующими портами\n * slc debug src/bin/test-domains-www.js\n *\n * @type {*|exports}\n */\n\n\n\nvar colors = require('colors');\nvar logger = require(\"verbose-console-log\");\n\nvar OpError = require(\"../errors/index\");\n\nvar express = require('express'),\n    http = require('http'),\n    path = require('path'),\n    domain = require('domain'),\n    cluster = require('cluster'),\n    http = require('http'),\n    numCPUs = require('os').cpus().length,\n    fs = require('fs');\nvar routes = require(\"../routes/index\");\n    //routes = [];\n\nif (0 && cluster.isMaster) {\n    //logger.log(\"###\", numCPUs);\n\n\n    if(0) {\n        // fork workers\n        for (var i = 0; i < numCPUs; i++) {\n            cluster.fork();\n        }\n    } else {\n        // fork only one worker\n        cluster.fork();\n    }\n\n\n    // when a worker dies create a new one\n    cluster.on('exit', function(worker, code, signal) {\n        logger.log('worker '.red + worker.process.pid + ' died'.red);\n        logger.log(\"NEW WORKER\".green);\n        cluster.fork();\n    });\n\n} else {\n\n    var app = express();\n\n    //var favicon = require('serve-favicon');\n    //app.use(favicon(__dirname + '/public/favicon.ico'));\n\n    //domains\n    // one domain for each request\n    /*app.use(function domainMiddleware(req, res, next) {\n\n        var reqDomain = domain.create();\n\n        res.on('close', function () {\n            reqDomain.exit();\n            //reqDomain.dispose();\n        });\n\n        res.on('finish', function () {\n            //reqDomain.dispose();\n            reqDomain.exit();\n        });\n\n        logger.log(\"### asdf\");\n\n        reqDomain.on('error', function (err, req, res, next) {\n            logger.log(\"<<< error >>>\");\n            // http://stackoverflow.com/questions/16763550/explicitly-adding-req-and-res-to-domain-dont-propagate-error-to-express-middlew\n            // delegate to express error-middleware\n\n\n            //reqDomain.dispose();\n            //reqDomain.exit();\n\n            //app.set(\"uncaught_error\", true);\n\n            //logger.log(\"###\", app.get(\"uncaught_error\"));\n\n            next(err);\n        });\n\n        // Adding the request and response objects to the domain\n        // makes the express error-middleware to not being called.\n        reqDomain.add(req);\n        reqDomain.add(res);\n\n        //reqDomain.run(next);\n        //reqDomain.run(function() {\n        //    logger.log(\"### qwer\");\n        //});\n        //next();\n        reqDomain.enter();\n        //reqDomain.run(next);\n\n        next();\n    });*/\n\n    //var createDomain = domain.create;\n    //app.use(function(req, res, next) {\n    //    var domain = createDomain();\n    //\n    //    domain.on('error', function(err) {\n    //        logger.log(\"<<<asdf>>>\");\n    //\n    //        domain.dispose();\n    //    });\n    //\n    //    domain.enter();\n    //    next();\n    //});\n\n\n\n\n\n\n\n    app.use(\"/api\", routes);\n\n\n\n    // all environments\n    app.set('port', process.env.PORT || 7777);\n\n\n    //app.use(express.logger('dev'));\n\n    app.use(function(req, res, next) {\n        logger.log(\"++++++++++\".red);\n    });\n\n    app.use(function(err, req, res, next) {\n\n        if(!err.message) {\n            logger.log(err);\n            logger.log(err.type);\n            logger.log(err.name);\n            logger.error('You did next(NOT_ERROR_VAR); stuff!!!!'.underline.red);\n            return;\n        }\n\n        logger.error('ERROR MIDDLEWARE'.red, err.message.red, 'Stack:'.yellow, err, err.stack);\n        res.writeHeader(500, {'Content-Type' : \"text/html\"});\n        res.write(\"<h1>\" + err.name + err.stack + \"</h1>\");\n        res.end(\"<p>\" + err.message + \"</p>\");\n\n        next(err);\n    });\n\n    app.use(function(err, req, res, next) {\n        lastErrorHandler(err);\n    });\n\n    process.on('uncaughtException', function(err) {\n        lastErrorHandler(err);\n    });\n\n    function lastErrorHandler(err) {\n        // @todo log to db and files\n        logger.error(err.message.red);\n\n        if(\"operational\" !== err.type) {\n            // This is UNCAUGHT error! So we must crash application in order to not continue app running in unknown state\n            // So log, send response to user and then crash\n            process.exit(1);\n        }\n    }\n\n\n\n    http.createServer(app).listen(app.get('port'), function(){\n        logger.log('Express server listening on port ' + app.get('port'));\n    });\n}"],"sourceRoot":"/source/"}