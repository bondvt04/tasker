{"version":3,"sources":["bin/www.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;;AAE5C,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;IAC5B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;IAC5B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM;IACrC,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;IAClB,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;;AAGxC,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;;;AAIvB,QAAG,CAAC,EAAE;;AAEF,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;AAC9B,mBAAO,CAAC,IAAI,EAAE,CAAC;SAClB;KACJ,MAAM;;AAEH,eAAO,CAAC,IAAI,EAAE,CAAC;KAClB;;;AAID,WAAO,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;AAC9C,cAAM,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7D,cAAM,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC/B,eAAO,CAAC,IAAI,EAAE,CAAC;KAClB,CAAC,CAAC;CAEN,MAAM;;AAEH,QAAI,GAAG,GAAG,OAAO,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDpB,QAAI,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;AACjC,OAAG,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC7B,YAAI,MAAM,GAAG,YAAY,EAAE,CAAC;;AAE5B,cAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC7B,kBAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;;AAEzB,kBAAM,CAAC,OAAO,EAAE,CAAC;SACpB,CAAC,CAAC;;AAEH,cAAM,CAAC,KAAK,EAAE,CAAC;AACf,YAAI,EAAE,CAAC;KACV,CAAC,CAAC;;AAEH,OAAG,CAAC,GAAG,CAAC,YAAY,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC3C,YAAI,CAAC,IAAI,EAAE,CAAC;AACZ,cAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACjC,WAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACjB,YAAI,EAAE,CAAC;KACV,CAAC,CAAC;;;;;AASH,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsD1C,QAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,YAAU;AACrD,cAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;KACrE,CAAC,CAAC;CACN","file":"bin/www.js","sourcesContent":["/**\n * Created by anatoliybondar on 8/31/15.\n */\n\n/**\n * @todo use this error handling:\n *\n * requestDomain.on('error', next);\n *\n * We can then use the default error handler to get a much nicer looking error page & stack trace:\n *\n * app.use(express.errorHandler({dumpExceptions: true, showStack: true}));\n *\n * http://www.asyncdev.net/2013/07/promises-errors-and-express-js/\n */\n\n/**\n * Открываем столько дебаггеров, сколько ядер, с соответствующими портами\n * slc debug src/bin/test-domains-www.js\n *\n * @type {*|exports}\n */\n\nvar colors = require('colors');\nvar logger = require(\"verbose-console-log\");\n\nvar express = require('express'),\n    http = require('http'),\n    path = require('path'),\n    domain = require('domain'),\n    cluster = require('cluster'),\n    http = require('http'),\n    numCPUs = require('os').cpus().length,\n    fs = require('fs'),\n    routes = require(\"../routes/index\");\n    //routes = [];\n\nif (0 && cluster.isMaster) {\n    //logger.log(\"###\", numCPUs);\n\n\n    if(0) {\n        // fork workers\n        for (var i = 0; i < numCPUs; i++) {\n            cluster.fork();\n        }\n    } else {\n        // fork only one worker\n        cluster.fork();\n    }\n\n\n    // when a worker dies create a new one\n    cluster.on('exit', function(worker, code, signal) {\n        logger.log('worker '.red + worker.process.pid + ' died'.red);\n        logger.log(\"NEW WORKER\".green);\n        cluster.fork();\n    });\n\n} else {\n\n    var app = express();\n\n    //var favicon = require('serve-favicon');\n    //app.use(favicon(__dirname + '/public/favicon.ico'));\n\n    //domains\n    // one domain for each request\n    /*app.use(function domainMiddleware(req, res, next) {\n\n        var reqDomain = domain.create();\n\n        res.on('close', function () {\n            reqDomain.exit();\n            //reqDomain.dispose();\n        });\n\n        res.on('finish', function () {\n            //reqDomain.dispose();\n            reqDomain.exit();\n        });\n\n        logger.log(\"### asdf\");\n\n        reqDomain.on('error', function (err, req, res, next) {\n            logger.log(\"<<< error >>>\");\n            // http://stackoverflow.com/questions/16763550/explicitly-adding-req-and-res-to-domain-dont-propagate-error-to-express-middlew\n            // delegate to express error-middleware\n\n\n            //reqDomain.dispose();\n            //reqDomain.exit();\n\n            // This is UNCAUGHT error! So we must crash application in order to not continue app running in unknown state\n            // So log, send response to user and then crash\n            //app.set(\"uncaught_error\", true);\n\n            //logger.log(\"###\", app.get(\"uncaught_error\"));\n\n            next(err);\n        });\n\n        // Adding the request and response objects to the domain\n        // makes the express error-middleware to not being called.\n        reqDomain.add(req);\n        reqDomain.add(res);\n\n        //reqDomain.run(next);\n        //reqDomain.run(function() {\n        //    logger.log(\"### qwer\");\n        //});\n        //next();\n        reqDomain.enter();\n        //reqDomain.run(next);\n\n        next();\n    });*/\n\n    var createDomain = domain.create;\n    app.use(function(req, res, next) {\n        var domain = createDomain();\n\n        domain.on('error', function(err) {\n            logger.log(\"<<<asdf>>>\");\n\n            domain.dispose();\n        });\n\n        domain.enter();\n        next();\n    });\n\n    app.use(\"/api/nodes\", function(req, res, next) {\n        asdf.qwer();\n        logger.log(\"------------- asdf\");\n        res.send(\"asdf\");\n        next();\n    });\n\n\n\n    //app.use(\"/api\", routes);\n\n\n\n    // all environments\n    app.set('port', process.env.PORT || 7777);\n\n\n    //app.use(express.logger('dev'));\n\n    // for testing which cluster that serves the request\n    //var router = express.Router();\n    //router.get('/', function(req, res, next) {\n    //    var debug = require(\"debug\")(\"app:main\");\n    //    debug(\"lol\");\n    //    res.status(200).json({ id: cluster.worker.id });\n    //});\n    //router.get('/error', function(req, res, next) {\n    //\n    //    // intentionally force an error\n    //    fs.readFile('', process.domain.intercept(function(data) {\n    //        // when using intercept we dont need this line anymore\n    //        //if (err) throw err;\n    //        res.send(data);\n    //    }));\n    //});\n    //app.use('/api', router);\n\n    //app.use(\"/api\", routes);\n\n    /*app.use(function(req, res, next) {\n        logger.log(\"++++++++++\".red);\n    });\n\n    app.use(function(err, req, res, next) {\n\n        if(!err.message) {\n            logger.error('You did next(NOT_ERROR_VAR); stuff!!!!'.underline.red);\n            return;\n        }\n\n        logger.error('ERROR MIDDLEWARE'.red, err.message.red, 'Stack:'.yellow, err, err.stack);\n        res.writeHeader(500, {'Content-Type' : \"text/html\"});\n        res.write(\"<h1>\" + err.name + err.stack + \"</h1>\");\n        res.end(\"<p>\" + err.message + \"</p>\");\n\n        next(err);\n    });\n\n    app.use(function(err, req, res, next) {\n\n        logger.log(\"###\", app.get(\"uncaught_error\"));\n        if(app.get(\"uncaught_error\")) {\n            process.exit(1);\n        }\n    });*/\n\n\n\n    http.createServer(app).listen(app.get('port'), function(){\n        logger.log('Express server listening on port ' + app.get('port'));\n    });\n}"],"sourceRoot":"/source/"}