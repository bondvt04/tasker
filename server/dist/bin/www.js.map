{"version":3,"sources":["bin/www.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;;AAE5C,IAAI,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;AACzD,IAAI,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAC5E,IAAI,mBAAmB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC;;AAElF,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;IAC5B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC;IAC5B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IACtB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM;IACrC,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;;AAGxC,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;;;AAIvB,QAAG,CAAC,EAAE;;AAEF,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;AAC9B,mBAAO,CAAC,IAAI,EAAE,CAAC;SAClB;KACJ,MAAM;;AAEH,eAAO,CAAC,IAAI,EAAE,CAAC;KAClB;;;AAID,WAAO,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;AAC9C,cAAM,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7D,cAAM,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC/B,eAAO,CAAC,IAAI,EAAE,CAAC;KAClB,CAAC,CAAC;CAEN,MAAM;;AAEH,QAAI,GAAG,GAAG,OAAO,EAAE,CAAC;;;;;;;;;;;;;;;;AAsBpB,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;;AAKxB,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;;;;AAK1C,OAAG,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC7B,cAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KAChC,CAAC,CAAC;;AAGH,OAAG,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAC7B,WAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAS,GAAG,EAAE;AAC1C,wBAAgB,CAAC,GAAG,CAAC,CAAC;KACzB,CAAC,CAAC;;AAIH,QAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,YAAU;AACrD,cAAM,CAAC,GAAG,CAAC,mCAAmC,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;KACrE,CAAC,CAAC;CACN","file":"bin/www.js","sourcesContent":["/**\n * Created by anatoliybondar on 8/31/15.\n */\n\n/**\n * @todo use this error handling:\n *\n * requestDomain.on('error', next);\n *\n * We can then use the default error handler to get a much nicer looking error page & stack trace:\n *\n * app.use(express.errorHandler({dumpExceptions: true, showStack: true}));\n *\n * http://www.asyncdev.net/2013/07/promises-errors-and-express-js/\n */\n\n/**\n * Открываем столько дебаггеров, сколько ядер, с соответствующими портами\n * slc debug src/bin/test-domains-www.js\n *\n * @type {*|exports}\n */\n\n\n\nvar colors = require('colors');\nvar logger = require(\"verbose-console-log\");\n\nvar OpError = require(\"../errors/index\").classes.OpError;\nvar lastErrorHandler = require(\"../errors/index\").handlers.lastErrorHandler;\nvar expressErrorHandler = require(\"../errors/index\").handlers.expressErrorHandler;\n\nvar express = require('express'),\n    http = require('http'),\n    path = require('path'),\n    domain = require('domain'),\n    cluster = require('cluster'),\n    http = require('http'),\n    numCPUs = require('os').cpus().length,\n    fs = require('fs');\nvar routes = require(\"../routes/index\");\n    //routes = [];\n\nif (1 && cluster.isMaster) {\n    //logger.log(\"###\", numCPUs);\n\n\n    if(0) {\n        // fork workers\n        for (var i = 0; i < numCPUs; i++) {\n            cluster.fork();\n        }\n    } else {\n        // fork only one worker\n        cluster.fork();\n    }\n\n\n    // when a worker dies create a new one\n    cluster.on('exit', function(worker, code, signal) {\n        logger.log('worker '.red + worker.process.pid + ' died'.red);\n        logger.log(\"NEW WORKER\".green);\n        cluster.fork();\n    });\n\n} else {\n\n    var app = express();\n\n    //var createDomain = domain.create;\n    //app.use(function(req, res, next) {\n    //    var domain = createDomain();\n    //\n    //    domain.on('error', function(err) {\n    //        logger.log(\"<<<asdf>>>\");\n    //\n    //        domain.dispose();\n    //    });\n    //\n    //    domain.enter();\n    //    next();\n    //});\n\n\n\n\n\n\n\n    app.use(\"/api\", routes);\n\n\n\n    // all environments\n    app.set('port', process.env.PORT || 7777);\n\n\n    //app.use(express.logger('dev'));\n\n    app.use(function(req, res, next) {\n        logger.log(\"++++++++++\".red);\n    });\n\n\n    app.use(expressErrorHandler);\n    process.on('uncaughtException', function(err) {\n        lastErrorHandler(err);\n    });\n\n\n\n    http.createServer(app).listen(app.get('port'), function(){\n        logger.log('Express server listening on port ' + app.get('port'));\n    });\n}"],"sourceRoot":"/source/"}