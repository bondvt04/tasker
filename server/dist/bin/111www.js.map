{"version":3,"sources":["bin/111www.js"],"names":[],"mappings":"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","file":"bin/111www.js","sourcesContent":["//#!/usr/bin/env node\n\n// http://stackoverflow.com/questions/16763550/explicitly-adding-req-and-res-to-domain-dont-propagate-error-to-express-middlew\n\nvar cluster = require('cluster');\n\nif (cluster.isMaster) {\n    // In real life, you'd probably use more than just 2 workers,\n    // and perhaps not put the master and worker in the same file.\n    //\n    // You can also of course get a bit fancier about logging, and\n    // implement whatever custom logic you need to prevent DoS\n    // attacks and other bad behavior.\n    //\n    // See the options in the cluster documentation.\n    //\n    // The important thing is that the master does very little,\n    // increasing our resilience to unexpected errors.\n\n    cluster.fork();\n    cluster.fork();\n\n    cluster.on('disconnect', function(worker) {\n        logger.error('disconnect!');\n        cluster.fork();\n    });\n\n} else {\n    var express = require('express');\n    var path = require('path');\n    var favicon = require('serve-favicon');\n    var logger = require('morgan');\n    var cookieParser = require('cookie-parser');\n    var bodyParser = require('body-parser');\n\n    var routes = require('../routes/index');\n\n    var app = express();\n\n    // we can now handle uncaught errors\n    // app.use(require('express-domain-middleware'));\n\n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'jade');\n\n    // uncomment after placing your favicon in /public\n    //app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\n    app.use(logger('dev'));\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cookieParser());\n    app.use(express.static(path.join(__dirname, 'public')));\n\n\n    app.use('/api', routes);\n\n    // catch 404 and forward to error handler\n    app.use(function(req, res, next) {\n        var err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n\n\n// express-domain's error handling\n//app.use(function errorHandler(err, req, res, next) {\n//  logger.log('error on request %d %s %s: %j', process.domain.id, req.method, req.url, err);\n//  res.send(500, \"Something bad happened. :(\");\n//  if(err.domain) {\n//    logger.log(\"########\", err.message);\n//    //you should think about gracefully stopping & respawning your server\n//    //since an unhandled error might put your application into an unknown state\n//  }\n//});\n\n//app.use(function(req, res, next) {\n//  res.status(404).send('Sorry cant find that!');\n//});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\n    if (app.get('env') === 'development') {\n        app.use(function(err, req, res, next) {\n            res.status(err.status || 500);\n            res.render('error', {\n                message: err.message,\n                error: err\n            });\n        });\n    }\n\n    // production error handler\n    // no stacktraces leaked to user\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error', {\n            message: err.message,\n            error: {}\n        });\n    });\n\n\n    var debug = require('debug')('server:server');\n    var http = require('http');\n\n    /**\n     * Get port from environment and store in Express.\n     */\n\n    var port = +process.env.PORT || '7777';\n    app.set('port', port);\n\n    /**\n     * Create HTTP server.\n     */\n    var server = http.createServer(app);\n\n    /**\n     * Listen on provided port, on all network interfaces.\n     */\n    server.listen(port);\n    server.on('error', function(error) {\n        if (error.syscall !== 'listen') {\n            throw error;\n        }\n\n        var bind = typeof port === 'string'\n            ? 'Pipe ' + port\n            : 'Port ' + port;\n\n        // handle specific listen errors with friendly messages\n        switch (error.code) {\n            case 'EACCES':\n                logger.error(bind + ' requires elevated privileges');\n                process.exit(1);\n                break;\n            case 'EADDRINUSE':\n                logger.error(bind + ' is already in use');\n                process.exit(1);\n                break;\n            default:\n                throw error;\n        }\n    });\n\n    server.on('listening', function() {\n        var addr = server.address();\n        var bind = typeof addr === 'string'\n            ? 'pipe ' + addr\n            : 'port ' + addr.port;\n        debug('Listening on ' + bind);\n    });\n}\n\n\n\n"],"sourceRoot":"/source/"}